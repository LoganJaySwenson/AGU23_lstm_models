# --- Experiment configurations --------------------------------------------------------------------

# experiment name, used as folder name
experiment_name: AGU_development_run

# place to store run directory (if empty runs are stored in code_dir/runs/)
run_dir:

# files to specify training, validation and test basins (relative to code root or absolute path)
train_basin_file: /panfs/pfs.local/work/water/l974s360/AGU_lstm_models/data_dir/basins.txt
validation_basin_file: /panfs/pfs.local/work/water/l974s360/AGU_lstm_models/data_dir/basins.txt
test_basin_file: /panfs/pfs.local/work/water/l974s360/AGU_lstm_models/data_dir/basins.txt

# training, validation and test time periods (format = 'dd/mm/yyyy')
train_start_date: '01/10/1979'
train_end_date: '30/09/2005'
validation_start_date: '01/10/2005'
validation_end_date: '30/09/2015'
test_start_date: '01/10/2015'
test_end_date: '30/09/2023'

# if you want to use different (continuous or split) periods per basin (and period) define path to pickle files here.
per_basin_train_periods_file:
per_basin_validation_periods_file:
per_basin_test_periods_file:

# fixed seed, leave empty to use a random seed
seed: 1

# which GPU (id) to use [in format of cuda:0, cuda:1 etc, or cpu or None]
device: cuda:0

# --- Validation configuration ---------------------------------------------------------------------

# specify after how many epochs to perform validation
validate_every: 1

# specify how many random basins to use for validation
validate_n_random_basins: 96

# By default, validation is cached (even is this argument is empty). Set to False, if you do not want to use it.
cache_validation_data: True

# specify which metrics to calculate during validation (see neuralhydrology.evaluation.metrics)
# this can either be a list or a dictionary. If a dictionary is used, the inner keys must match the name of the
# target_variable specified below. Using dicts allows for different metrics per target variable.
metrics:
- NSE
- KGE
- Alpha-NSE
- Beta-NSE
- RMSE

# --- Model configuration --------------------------------------------------------------------------

# base model type [cudalstm, customlstm, ealstm, embcudalstm, mtslstm, gru, transformer]
# (has to match the if statement in modelzoo/__init__.py)
model: cudalstm

# path to weight file that should be used as initial weights. Leave empty to start from random weights
checkpoint_path:

# prediction head [regression]. Define the head specific parameters below
head: regression

# ----> Regression settings <----
output_activation: linear

# ----> General settings <----

# Number of cell states of the LSTM
hidden_size: 256

# Initial bias value of the forget gate
initial_forget_bias: 3

# Dropout applied to the output of the LSTM
output_dropout: 0.4

# --- Training configuration -----------------------------------------------------------------------

# specify optimizer [Adam]
optimizer: Adam

# specify loss [MSE, NSE, RMSE]
loss: MSE

# add regularization terms.
# Options: tie_frequencies (couples the different frequencies' predictions in an MSE error term)
regularization:
#- tie_frequencies

# specify learning rates to use starting at specific epochs (0 is the initial learning rate)
learning_rate:
    0: 1e-3
    10: 5e-4
    25: 1e-4

# Mini-batch size
batch_size: 256

# Number of training epochs
epochs: 30

# If a value, clips the gradients during training to that norm.
clip_gradient_norm: 1

# Defines which time steps are used to calculate the loss. Can't be larger than seq_length.
# If use_frequencies is used, this needs to be a dict mapping each frequency to a predict_last_n-value, else an int.
predict_last_n: 1

# Length of the input sequence
# If use_frequencies is used, this needs to be a dict mapping each frequency to a seq_length, else an int.
seq_length: 365

# Number of parallel workers used in the data pipeline
num_workers: 8

# Log the training loss every n steps
log_interval: 5

# If true, writes logging results into tensorboard file
log_tensorboard: True

# Save model weights every n epochs
save_weights_every: 1

# Store the results of the validation to disk
save_validation_results: False


# --- Data configurations --------------------------------------------------------------------------

# which data set to use [camels_us, camels_gb, global, hourly_camels_us, camels_cl, generic]
dataset: generic

# Path to data set root
data_dir: /panfs/pfs.local/work/water/l974s360/AGU_lstm_models/data_dir

# Set to True, if train data file should be save to disk. If empty or False, train data is not saved.
save_train_data: False

# If existing train data file exist, specify path to the pickle file here
train_data_file:

# Forcing product [daymet, maurer, maurer_extended, nldas, nldas_extended, nldas_hourly]
# can be either a list of forcings or a single forcing product
forcings: time_series

# variables to use as time series input (names match the data file column headers):
dynamic_inputs:
  - pr
  - tmmn
  - tmmx
  - srad
  - rmin
  - rmax
  - sph
  - vs
  - etr

# which columns to use as target
target_variables:
- flow

# clip negative predictions to zero for all variables listed below. Should be a list, even for single variables.
clip_targets_to_zero:
- flow

# Which CAMELS attributes to use. Leave empty if none should be used
static_attributes:
- drainage_area
- elevation
- crops
- grassland
- pasture
- open_water
- urban
- forest
- other
- carbonate
- non_carbonate
- eolian_sediment_coarse
- eolian_sediment_fine
- glacial_till_loam
- glacial_till_coarse
- colluvial_sediment
- extrusive_volcanic
- saline_lake_sediment
- coastal_sediment_fine
- silicic_residual

# Path to pickle file(s) containing additional data. Each pickle file must contain a dictionary
# with one key for each basin and the value is a time indexed data frame, where each column is a 
# feature.
# Convention: If a column is used as static input, the value to use for specific sample should be in
# same row (datetime) as the target discharge value.
additional_feature_files:

# columns of the data frame to use as (additional) "static" inputs for each sample. Must be present in
# the above linked additional feature files. These values will be used as static inputs, but they can evolve over time.
# Leave empty to not use any.
evolving_attributes:

# whether to use basin id one hot encoding as (additional) static input
use_basin_id_encoding: True